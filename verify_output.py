import json
import csv
from pathlib import Path
from collections import Counter

def quick_verify(output_dir):
    """Quick verification of the most important aspects"""
    
    # 1. Check all 420 JSONs exist
    json_files = list(Path(output_dir).glob("json/*.json"))
    print(f"‚úì Found {len(json_files)} NFTs (expected 420)")
    
    # 2. Load all NFTs
    nfts = []
    for f in json_files:
        with open(f) as file:
            nfts.append(json.load(file))
    
    # 3. Check uniqueness
    # Assuming 'hash_id' is a unique identifier in your NFT JSON structure
    # If not, you might need to create a unique signature from traits
    hashes = [nft.get('hash_id', str(nft.get('attributes', nft.get('traits')))) for nft in nfts] 
    print(f"‚úì Unique NFTs: {len(set(hashes))} (expected 420)")
    
    # 4. Check critical traits
    rank_counts = Counter()
    glyph_counts = Counter()
    
    for nft in nfts:
        # Adjust 'traits' if your NFT structure uses 'attributes' or another key
        nft_traits = nft.get('traits', nft.get('attributes', {}))
        if isinstance(nft_traits, dict): # Check if traits is a dictionary
            rank_counts[nft_traits.get('Rank')] += 1
            glyph_counts[nft_traits.get('Glyph')] += 1
        elif isinstance(nft_traits, list): # Handle if traits is a list of dicts
             for trait_item in nft_traits:
                 if trait_item.get('trait_type') == 'Rank':
                     rank_counts[trait_item.get('value')] += 1
                 elif trait_item.get('trait_type') == 'Glyph':
                     glyph_counts[trait_item.get('value')] += 1

    # Check Joker/Wildcard
    # Ensure 'Joker / Wildcard' exactly matches the trait value in your data
    joker_count = rank_counts.get('Joker / Wildcard', 0) 
    print(f"{'‚úì' if joker_count == 1 else '‚úó'} Joker/Wildcard: {joker_count} (expected 1)")
    
    # Check Sovereign Glyphs (1-7)
    # Ensure 'glyph_01', 'glyph_02', etc. match your trait values
    for i in range(1, 8):
        glyph_key = f'glyph_{i:02d}' 
        count = glyph_counts.get(glyph_key, 0)
        print(f"{'‚úì' if count == 1 else '‚úó'} {glyph_key}: {count} (expected 1)")
    
    all_passed = (len(json_files) == 420 and 
                  len(set(hashes)) == 420 and 
                  joker_count == 1 and
                  all(glyph_counts.get(f'glyph_{i:02d}', 0) == 1 for i in range(1,8)))
    
    return all_passed

# Run it
if __name__ == "__main__":
    import sys
    # Default to 'output' if no directory is provided, common for single runs
    output_dir_arg = sys.argv[1] if len(sys.argv) > 1 else "output" 
    
    # Check if the output directory exists
    if not Path(output_dir_arg).is_dir():
        print(f"Error: Output directory '{output_dir_arg}' not found.")
        print("Please specify a valid output directory generated by the NFT tool.")
        print("Example: python verify_output.py output_1")
        sys.exit(1)
        
    print(f"\n--- Verifying Collection in '{output_dir_arg}' ---")
    if quick_verify(output_dir_arg):
        print("\nüéâ ALL CRITICAL CHECKS PASSED!")
    else:
        print("\n‚ùå SOME CRITICAL CHECKS FAILED - INVESTIGATE!")
        sys.exit(1) # Exit with error code if checks fail